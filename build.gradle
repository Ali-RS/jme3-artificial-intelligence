apply plugin: 'java';

task downloadSuite << {
    def suite_folder = "suite" // Is not completely implemented yet.
    File folder = file(suite_folder + "/nbproject");
    if (!folder.exists()) {
        println "Downloading the plugins suite...";
        exec {
            commandLine 'git', 'clone', '--depth', '1', suite_repo_url, suite_folder
        }
    } else {
        println "Updating the plugins suite...";
        exec {
            workingDir suite_folder
            commandLine 'git', 'pull'
        }
    }
}

task setupSuite(type: GradleBuild, dependsOn: downloadSuite) {
    println "Setting up the plugins suite....."

    buildFile = 'suite/build.gradle'
    tasks = ['setupSuite']
}

task applySuitePath(dependsOn: setupSuite) << {
    println "Applying new suite path"
    File f = file("nbproject/suite.properties")
    if (f.exists())
        f.delete();

    f.createNewFile();
    f.write('suite.dir=${basedir}/suite\r\n');
}

task suite(dependsOn: applySuitePath) << {

}

task assemble(dependsOn: suite, overwrite: true) << {
    println "Setting myself as the module to be compiled..."
    ant.propertyfile(file: "suite/nbproject/project.properties") {
        entry(key: "project.com.jme3.ai", value: "../") // Set the current directory as directory for module
        entry(key: "modules", value: '${project.com.jme3.ai}')
    }

    println "Manually fixing/adding Library Entries (jMonkey Version)"

    ant.propertyfile(file: "suite/nbproject/jme-project-libs.properties") {
        def jmeVersion = "";

        if (System.getenv("TRAVIS").equals("true")) { // TODO: Replace with engine/version.gradle
            jmeVersion = "3.1.0-master-SNAPSHOT"
        } else {
            jmeVersion = "3.1.0-SNAPSHOT" // Local Builds don't contain the branch for some reason
        }

        entry(key: "jme3-version-string", value: jmeVersion)
        /*entry(key: 'libs.jme3.dir', value:'/Users/MeFisto94/Documents/Coding/jme3-artificial-intelligence/suite/libs')

        file("suite/nbproject/jme-project-libs.properties").withReader { reader ->
            def userProps = new Properties()
            userProps.load(reader)
            for(String k: userProps.keySet()) {
                if (k != "libs.jme3.dir")
                    entry(key: k, value: userProps.getProperty(k))
            }
        }*/
    }

    //ant.ant(dir: ".", antfile: "build.xml") // Already called by nbm
    println "Building Netbeans Modules"
    // ant.ant(dir: ".", antfile: "build.xml", target: "nbm") // Note: for some reason, the nbm target isn't really executed?
    exec {
        commandLine 'ant', 'nbm'
    }
}